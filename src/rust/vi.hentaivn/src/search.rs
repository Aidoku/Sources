use crate::BASE_URL;
use aidoku::{
	helpers::uri::QueryParameters,
	prelude::format,
	std::{String, Vec},
	Filter, FilterType,
};
use alloc::string::ToString;

fn genre_map(genre: String) -> String {
	String::from(match genre.as_str() {
		"3D Hentai" => "3",
		"Action" => "5",
		"Adult" => "116",
		"Adventure" => "203",
		"Ahegao" => "20",
		"Anal" => "21",
		"Angel" => "249",
		"Ảnh động" => "131",
		"Animal" => "127",
		"Animal girl" => "22",
		"Áo Dài" => "279",
		"Apron" => "277",
		"Artist CG" => "115",
		"Based Game" => "130",
		"BBM" => "257",
		"BBW" => "251",
		"BDSM" => "24",
		"Bestiality" => "25",
		"Big Ass" => "133",
		"Big Boobs" => "23",
		"Big Penis" => "32",
		"Blackmail" => "267",
		"Bloomers" => "27",
		"BlowJobs" => "28",
		"Body Swap" => "29",
		"Bodysuit" => "30",
		"Bondage" => "254",
		"Breast Sucking" => "33",
		"BreastJobs" => "248",
		"Brocon" => "31",
		"Brother" => "242",
		"Business Suit" => "241",
		"Catgirls" => "39",
		"Che ít" => "101",
		"Che nhiều" => "129",
		"Cheating" => "34",
		"Chikan" => "35",
		"Chinese Dress" => "271",
		"Có che" => "100",
		"Comedy" => "36",
		"Comic" => "120",
		"Condom" => "210",
		"Cosplay" => "38",
		"Cousin" => "2",
		"Crotch Tattoo" => "275",
		"Cunnilingus" => "269",
		"Dark Skin" => "40",
		"Daughter" => "262",
		"Deepthroat" => "268",
		"Demon" => "132",
		"DemonGirl" => "212",
		"Devil" => "104",
		"DevilGirl" => "105",
		"Dirty" => "253",
		"Dirty Old Man" => "41",
		"DogGirl" => "260",
		"Double Penetration" => "42",
		"Doujinshi" => "44",
		"Drama" => "4",
		"Drug" => "43",
		"Ecchi" => "45",
		"Elder Sister" => "245",
		"Elf" => "125",
		"Exhibitionism" => "46",
		"Fantasy" => "123",
		"Father" => "243",
		"Femdom" => "47",
		"Fingering" => "48",
		"Footjob" => "108",
		"Foxgirls" => "259",
		"Full Color" => "37",
		"Furry" => "202",
		"Futanari" => "50",
		"GangBang" => "51",
		"Garter Belts" => "206",
		"Gender Bender" => "52",
		"Ghost" => "106",
		"Glasses" => "56",
		"Gothic Lolita" => "264",
		"Group" => "53",
		"Guro" => "55",
		"Hairy" => "247",
		"Handjob" => "57",
		"Harem" => "58",
		"HentaiVN" => "102",
		"Historical" => "80",
		"Horror" => "122",
		"Housewife" => "59",
		"Humiliation" => "60",
		"Idol" => "61",
		"Imouto" => "244",
		"Incest" => "62",
		"Insect (Côn Trùng)" => "26",
		"Isekai" => "280",
		"Không che" => "99",
		"Kimono" => "110",
		"Kuudere" => "265",
		"Lolicon" => "63",
		"Maids" => "64",
		"Manhua" => "273",
		"Manhwa" => "114",
		"Masturbation" => "65",
		"Mature" => "119",
		"Miko" => "124",
		"Milf" => "126",
		"Mind Break" => "121",
		"Mind Control" => "113",
		"Mizugi" => "263",
		"Monster" => "66",
		"Monstergirl" => "67",
		"Mother" => "103",
		"Nakadashi" => "205",
		"Netori" => "1",
		"Non-hen" => "201",
		"NTR" => "68",
		"Nun" => "272",
		"Nurse" => "69",
		"Old Man" => "211",
		"Oneshot" => "71",
		"Oral" => "70",
		"Osananajimi" => "209",
		"Paizuri" => "72",
		"Pantyhose" => "204",
		"Ponytail" => "276",
		"Pregnant" => "73",
		"Rape" => "98",
		"Rimjob" => "258",
		"Romance" => "117",
		"Ryona" => "207",
		"Scat" => "134",
		"School Uniform" => "74",
		"SchoolGirl" => "75",
		"Series" => "87",
		"Sex Toys" => "88",
		"Shimapan" => "246",
		"Short Hentai" => "118",
		"Shota" => "77",
		"Shoujo" => "76",
		"Siscon" => "79",
		"Sister" => "78",
		"Slave" => "82",
		"Sleeping" => "213",
		"Small Boobs" => "84",
		"Son" => "278",
		"Sports" => "83",
		"Stockings" => "81",
		"Supernatural" => "85",
		"Sweating" => "250",
		"Swimsuit" => "86",
		"Tall Girl" => "266",
		"Teacher" => "91",
		"Tentacles" => "89",
		"Time Stop" => "109",
		"Tomboy" => "90",
		"Tracksuit" => "252",
		"Transformation" => "256",
		"Trap" => "92",
		"Truyện Việt" => "274",
		"Tsundere" => "111",
		"Twins" => "93",
		"Twintails" => "261",
		"Vampire" => "107",
		"Vanilla" => "208",
		"Virgin" => "95",
		"Webtoon" => "270",
		"X-ray" => "94",
		"Yandere" => "112",
		"Yaoi" => "96",
		"Yuri" => "97",
		"Zombie" => "128",
		_ => "",
	})
}

pub fn get_search_url(filters: Vec<Filter>, page: i32) -> String {
	let mut qs = QueryParameters::new();
	qs.push("dou", None);
	qs.push("char", None);
	qs.push("page", Some(&page.to_string()));
	qs.push("search", None);

	for filter in filters {
		match filter.kind {
			FilterType::Title => {
				if let Ok(title) = filter.value.as_string() {
					qs.push("name", Some(&title.read()));
				}
			}
			FilterType::Genre => {
				if filter.value.as_int().unwrap_or(-1) == 1 {
					qs.push("tag[]", Some(&genre_map(filter.name)));
				}
			}
			_ => continue,
		}
	}
	format!("{BASE_URL}/forum/search-plus.php?{qs}")
}
